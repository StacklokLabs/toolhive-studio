// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-fetch'
import type {
  GetApiOpenapiJsonData,
  GetApiOpenapiJsonResponses,
  GetApiV1BetaClientsData,
  GetApiV1BetaClientsResponses,
  PostApiV1BetaClientsData,
  PostApiV1BetaClientsResponses,
  PostApiV1BetaClientsErrors,
  GetApiV1BetaDiscoveryClientsData,
  GetApiV1BetaDiscoveryClientsResponses,
  GetApiV1BetaRegistryData,
  GetApiV1BetaRegistryResponses,
  PostApiV1BetaRegistryData,
  PostApiV1BetaRegistryErrors,
  DeleteApiV1BetaRegistryByNameData,
  DeleteApiV1BetaRegistryByNameResponses,
  DeleteApiV1BetaRegistryByNameErrors,
  GetApiV1BetaRegistryByNameData,
  GetApiV1BetaRegistryByNameResponses,
  GetApiV1BetaRegistryByNameErrors,
  GetApiV1BetaRegistryByNameServersData,
  GetApiV1BetaRegistryByNameServersResponses,
  GetApiV1BetaRegistryByNameServersErrors,
  GetApiV1BetaRegistryByNameServersByServerNameData,
  GetApiV1BetaRegistryByNameServersByServerNameResponses,
  GetApiV1BetaRegistryByNameServersByServerNameErrors,
  GetApiV1BetaVersionData,
  GetApiV1BetaVersionResponses,
  GetApiV1BetaWorkloadsData,
  GetApiV1BetaWorkloadsResponses,
  PostApiV1BetaWorkloadsData,
  PostApiV1BetaWorkloadsResponses,
  PostApiV1BetaWorkloadsErrors,
  DeleteApiV1BetaWorkloadsByNameData,
  DeleteApiV1BetaWorkloadsByNameResponses,
  DeleteApiV1BetaWorkloadsByNameErrors,
  GetApiV1BetaWorkloadsByNameData,
  GetApiV1BetaWorkloadsByNameResponses,
  GetApiV1BetaWorkloadsByNameErrors,
  PostApiV1BetaWorkloadsByNameRestartData,
  PostApiV1BetaWorkloadsByNameRestartResponses,
  PostApiV1BetaWorkloadsByNameRestartErrors,
  PostApiV1BetaWorkloadsByNameStopData,
  PostApiV1BetaWorkloadsByNameStopResponses,
  PostApiV1BetaWorkloadsByNameStopErrors,
  GetHealthData,
  GetHealthResponses,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Get OpenAPI specification
 * Returns the OpenAPI specification for the API
 */
export const getApiOpenapiJson = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiOpenapiJsonData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiOpenapiJsonResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/openapi.json',
    ...options,
  })
}

/**
 * List all clients
 * List all registered clients in ToolHive
 */
export const getApiV1BetaClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1BetaClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1BetaClientsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1beta/clients',
    ...options,
  })
}

/**
 * Register a new client
 * Register a new client with ToolHive
 */
export const postApiV1BetaClients = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1BetaClientsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1BetaClientsResponses,
    PostApiV1BetaClientsErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/clients',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * List all clients status
 * List all clients compatible with ToolHive and their status
 */
export const getApiV1BetaDiscoveryClients = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiV1BetaDiscoveryClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1BetaDiscoveryClientsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1beta/discovery/clients',
    ...options,
  })
}

/**
 * List registries
 * Get a list of the current registries
 */
export const getApiV1BetaRegistry = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1BetaRegistryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1BetaRegistryResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1beta/registry',
    ...options,
  })
}

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistry = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiV1BetaRegistryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    PostApiV1BetaRegistryErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/registry',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Remove a registry
 * Remove a specific registry
 */
export const deleteApiV1BetaRegistryByName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiV1BetaRegistryByNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiV1BetaRegistryByNameResponses,
    DeleteApiV1BetaRegistryByNameErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/registry/{name}',
    ...options,
  })
}

/**
 * Get a registry
 * Get details of a specific registry
 */
export const getApiV1BetaRegistryByName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1BetaRegistryByNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1BetaRegistryByNameResponses,
    GetApiV1BetaRegistryByNameErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/registry/{name}',
    ...options,
  })
}

/**
 * List servers in a registry
 * Get a list of servers in a specific registry
 */
export const getApiV1BetaRegistryByNameServers = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1BetaRegistryByNameServersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1BetaRegistryByNameServersResponses,
    GetApiV1BetaRegistryByNameServersErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/registry/{name}/servers',
    ...options,
  })
}

/**
 * Get a server from a registry
 * Get details of a specific server in a registry
 */
export const getApiV1BetaRegistryByNameServersByServerName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiV1BetaRegistryByNameServersByServerNameData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1BetaRegistryByNameServersByServerNameResponses,
    GetApiV1BetaRegistryByNameServersByServerNameErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/registry/{name}/servers/{serverName}',
    ...options,
  })
}

/**
 * Get server version
 * Returns the current version of the server
 */
export const getApiV1BetaVersion = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1BetaVersionData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1BetaVersionResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1beta/version',
    ...options,
  })
}

/**
 * List all workloads
 * Get a list of all running workloads
 */
export const getApiV1BetaWorkloads = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1BetaWorkloadsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1BetaWorkloadsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1beta/workloads',
    ...options,
  })
}

/**
 * Create a new workload
 * Create and start a new workload
 */
export const postApiV1BetaWorkloads = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1BetaWorkloadsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1BetaWorkloadsResponses,
    PostApiV1BetaWorkloadsErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/workloads',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete a workload
 * Delete a workload
 */
export const deleteApiV1BetaWorkloadsByName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiV1BetaWorkloadsByNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiV1BetaWorkloadsByNameResponses,
    DeleteApiV1BetaWorkloadsByNameErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/workloads/{name}',
    ...options,
  })
}

/**
 * Get workload details
 * Get details of a specific workload
 */
export const getApiV1BetaWorkloadsByName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiV1BetaWorkloadsByNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1BetaWorkloadsByNameResponses,
    GetApiV1BetaWorkloadsByNameErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/workloads/{name}',
    ...options,
  })
}

/**
 * Restart a workload
 * Restart a running workload
 */
export const postApiV1BetaWorkloadsByNameRestart = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1BetaWorkloadsByNameRestartData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1BetaWorkloadsByNameRestartResponses,
    PostApiV1BetaWorkloadsByNameRestartErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/workloads/{name}/restart',
    ...options,
  })
}

/**
 * Stop a workload
 * Stop a running workload
 */
export const postApiV1BetaWorkloadsByNameStop = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiV1BetaWorkloadsByNameStopData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1BetaWorkloadsByNameStopResponses,
    PostApiV1BetaWorkloadsByNameStopErrors,
    ThrowOnError
  >({
    url: '/api/v1beta/workloads/{name}/stop',
    ...options,
  })
}

/**
 * Health check
 * Check if the API is healthy
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetHealthResponses,
    unknown,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  })
}
