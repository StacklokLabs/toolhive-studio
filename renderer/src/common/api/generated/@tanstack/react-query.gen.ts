// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getApiOpenapiJson,
  getApiV1BetaDiscoveryClients,
  getApiV1BetaRegistry,
  postApiV1BetaRegistry,
  deleteApiV1BetaRegistryByName,
  getApiV1BetaRegistryByName,
  getApiV1BetaRegistryByNameServers,
  getApiV1BetaRegistryByNameServersByServerName,
  getApiV1BetaServers,
  postApiV1BetaServers,
  deleteApiV1BetaServersByName,
  getApiV1BetaServersByName,
  postApiV1BetaServersByNameRestart,
  postApiV1BetaServersByNameStop,
  getApiV1BetaVersion,
  getHealth,
} from '../sdk.gen'
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query'
import type {
  GetApiOpenapiJsonData,
  GetApiV1BetaDiscoveryClientsData,
  GetApiV1BetaRegistryData,
  PostApiV1BetaRegistryData,
  PostApiV1BetaRegistryError,
  DeleteApiV1BetaRegistryByNameData,
  DeleteApiV1BetaRegistryByNameError,
  DeleteApiV1BetaRegistryByNameResponse,
  GetApiV1BetaRegistryByNameData,
  GetApiV1BetaRegistryByNameServersData,
  GetApiV1BetaRegistryByNameServersByServerNameData,
  GetApiV1BetaServersData,
  PostApiV1BetaServersData,
  PostApiV1BetaServersError,
  PostApiV1BetaServersResponse,
  DeleteApiV1BetaServersByNameData,
  DeleteApiV1BetaServersByNameError,
  DeleteApiV1BetaServersByNameResponse,
  GetApiV1BetaServersByNameData,
  PostApiV1BetaServersByNameRestartData,
  PostApiV1BetaServersByNameRestartError,
  PostApiV1BetaServersByNameRestartResponse,
  PostApiV1BetaServersByNameStopData,
  PostApiV1BetaServersByNameStopError,
  PostApiV1BetaServersByNameStopResponse,
  GetApiV1BetaVersionData,
  GetHealthData,
} from '../types.gen'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getApiOpenapiJsonQueryKey = (
  options?: Options<GetApiOpenapiJsonData>
) => createQueryKey('getApiOpenapiJson', options)

/**
 * Get OpenAPI specification
 * Returns the OpenAPI specification for the API
 */
export const getApiOpenapiJsonOptions = (
  options?: Options<GetApiOpenapiJsonData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOpenapiJson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiOpenapiJsonQueryKey(options),
  })
}

export const getApiV1BetaDiscoveryClientsQueryKey = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => createQueryKey('getApiV1BetaDiscoveryClients', options)

/**
 * List all clients status
 * List all clients compatible with ToolHive and their status
 */
export const getApiV1BetaDiscoveryClientsOptions = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaDiscoveryClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaDiscoveryClientsQueryKey(options),
  })
}

export const getApiV1BetaRegistryQueryKey = (
  options?: Options<GetApiV1BetaRegistryData>
) => createQueryKey('getApiV1BetaRegistry', options)

/**
 * List registries
 * Get a list of the current registries
 */
export const getApiV1BetaRegistryOptions = (
  options?: Options<GetApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryQueryKey(options),
  })
}

export const postApiV1BetaRegistryQueryKey = (
  options?: Options<PostApiV1BetaRegistryData>
) => createQueryKey('postApiV1BetaRegistry', options)

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryOptions = (
  options?: Options<PostApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaRegistryQueryKey(options),
  })
}

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryMutation = (
  options?: Partial<Options<PostApiV1BetaRegistryData>>
): UseMutationOptions<
  unknown,
  PostApiV1BetaRegistryError,
  Options<PostApiV1BetaRegistryData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiV1BetaRegistryError,
    Options<PostApiV1BetaRegistryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Remove a registry
 * Remove a specific registry
 */
export const deleteApiV1BetaRegistryByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaRegistryByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaRegistryByNameResponse,
  DeleteApiV1BetaRegistryByNameError,
  Options<DeleteApiV1BetaRegistryByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaRegistryByNameResponse,
    DeleteApiV1BetaRegistryByNameError,
    Options<DeleteApiV1BetaRegistryByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaRegistryByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaRegistryByNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => createQueryKey('getApiV1BetaRegistryByName', options)

/**
 * Get a registry
 * Get details of a specific registry
 */
export const getApiV1BetaRegistryByNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => createQueryKey('getApiV1BetaRegistryByNameServers', options)

/**
 * List servers in a registry
 * Get a list of servers in a specific registry
 */
export const getApiV1BetaRegistryByNameServersOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersByServerNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => createQueryKey('getApiV1BetaRegistryByNameServersByServerName', options)

/**
 * Get a server from a registry
 * Get details of a specific server in a registry
 */
export const getApiV1BetaRegistryByNameServersByServerNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServersByServerName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersByServerNameQueryKey(options),
  })
}

export const getApiV1BetaServersQueryKey = (
  options?: Options<GetApiV1BetaServersData>
) => createQueryKey('getApiV1BetaServers', options)

/**
 * List all servers
 * Get a list of all running servers
 */
export const getApiV1BetaServersOptions = (
  options?: Options<GetApiV1BetaServersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaServers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaServersQueryKey(options),
  })
}

export const postApiV1BetaServersQueryKey = (
  options: Options<PostApiV1BetaServersData>
) => createQueryKey('postApiV1BetaServers', options)

/**
 * Create a new server
 * Create and start a new server
 */
export const postApiV1BetaServersOptions = (
  options: Options<PostApiV1BetaServersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaServers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaServersQueryKey(options),
  })
}

/**
 * Create a new server
 * Create and start a new server
 */
export const postApiV1BetaServersMutation = (
  options?: Partial<Options<PostApiV1BetaServersData>>
): UseMutationOptions<
  PostApiV1BetaServersResponse,
  PostApiV1BetaServersError,
  Options<PostApiV1BetaServersData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaServersResponse,
    PostApiV1BetaServersError,
    Options<PostApiV1BetaServersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaServers({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a server
 * Delete a server
 */
export const deleteApiV1BetaServersByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaServersByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaServersByNameResponse,
  DeleteApiV1BetaServersByNameError,
  Options<DeleteApiV1BetaServersByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaServersByNameResponse,
    DeleteApiV1BetaServersByNameError,
    Options<DeleteApiV1BetaServersByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaServersByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaServersByNameQueryKey = (
  options: Options<GetApiV1BetaServersByNameData>
) => createQueryKey('getApiV1BetaServersByName', options)

/**
 * Get server details
 * Get details of a specific server
 */
export const getApiV1BetaServersByNameOptions = (
  options: Options<GetApiV1BetaServersByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaServersByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaServersByNameQueryKey(options),
  })
}

export const postApiV1BetaServersByNameRestartQueryKey = (
  options: Options<PostApiV1BetaServersByNameRestartData>
) => createQueryKey('postApiV1BetaServersByNameRestart', options)

/**
 * Restart a server
 * Restart a running server
 */
export const postApiV1BetaServersByNameRestartOptions = (
  options: Options<PostApiV1BetaServersByNameRestartData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaServersByNameRestart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaServersByNameRestartQueryKey(options),
  })
}

/**
 * Restart a server
 * Restart a running server
 */
export const postApiV1BetaServersByNameRestartMutation = (
  options?: Partial<Options<PostApiV1BetaServersByNameRestartData>>
): UseMutationOptions<
  PostApiV1BetaServersByNameRestartResponse,
  PostApiV1BetaServersByNameRestartError,
  Options<PostApiV1BetaServersByNameRestartData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaServersByNameRestartResponse,
    PostApiV1BetaServersByNameRestartError,
    Options<PostApiV1BetaServersByNameRestartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaServersByNameRestart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaServersByNameStopQueryKey = (
  options: Options<PostApiV1BetaServersByNameStopData>
) => createQueryKey('postApiV1BetaServersByNameStop', options)

/**
 * Stop a server
 * Stop a running server
 */
export const postApiV1BetaServersByNameStopOptions = (
  options: Options<PostApiV1BetaServersByNameStopData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaServersByNameStop({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaServersByNameStopQueryKey(options),
  })
}

/**
 * Stop a server
 * Stop a running server
 */
export const postApiV1BetaServersByNameStopMutation = (
  options?: Partial<Options<PostApiV1BetaServersByNameStopData>>
): UseMutationOptions<
  PostApiV1BetaServersByNameStopResponse,
  PostApiV1BetaServersByNameStopError,
  Options<PostApiV1BetaServersByNameStopData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaServersByNameStopResponse,
    PostApiV1BetaServersByNameStopError,
    Options<PostApiV1BetaServersByNameStopData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaServersByNameStop({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaVersionQueryKey = (
  options?: Options<GetApiV1BetaVersionData>
) => createQueryKey('getApiV1BetaVersion', options)

/**
 * Get server version
 * Returns the current version of the server
 */
export const getApiV1BetaVersionOptions = (
  options?: Options<GetApiV1BetaVersionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaVersionQueryKey(options),
  })
}

export const getHealthQueryKey = (options?: Options<GetHealthData>) =>
  createQueryKey('getHealth', options)

/**
 * Health check
 * Check if the API is healthy
 */
export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHealthQueryKey(options),
  })
}
