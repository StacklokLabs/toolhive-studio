// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getApiOpenapiJson,
  getApiV1BetaClients,
  postApiV1BetaClients,
  getApiV1BetaDiscoveryClients,
  getApiV1BetaRegistry,
  postApiV1BetaRegistry,
  deleteApiV1BetaRegistryByName,
  getApiV1BetaRegistryByName,
  getApiV1BetaRegistryByNameServers,
  getApiV1BetaRegistryByNameServersByServerName,
  getApiV1BetaVersion,
  getApiV1BetaWorkloads,
  postApiV1BetaWorkloads,
  deleteApiV1BetaWorkloadsByName,
  getApiV1BetaWorkloadsByName,
  postApiV1BetaWorkloadsByNameRestart,
  postApiV1BetaWorkloadsByNameStop,
  getHealth,
} from '../sdk.gen'
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query'
import type {
  GetApiOpenapiJsonData,
  GetApiV1BetaClientsData,
  PostApiV1BetaClientsData,
  PostApiV1BetaClientsError,
  PostApiV1BetaClientsResponse,
  GetApiV1BetaDiscoveryClientsData,
  GetApiV1BetaRegistryData,
  PostApiV1BetaRegistryData,
  PostApiV1BetaRegistryError,
  DeleteApiV1BetaRegistryByNameData,
  DeleteApiV1BetaRegistryByNameError,
  DeleteApiV1BetaRegistryByNameResponse,
  GetApiV1BetaRegistryByNameData,
  GetApiV1BetaRegistryByNameServersData,
  GetApiV1BetaRegistryByNameServersByServerNameData,
  GetApiV1BetaVersionData,
  GetApiV1BetaWorkloadsData,
  PostApiV1BetaWorkloadsData,
  PostApiV1BetaWorkloadsError,
  PostApiV1BetaWorkloadsResponse,
  DeleteApiV1BetaWorkloadsByNameData,
  DeleteApiV1BetaWorkloadsByNameError,
  DeleteApiV1BetaWorkloadsByNameResponse,
  GetApiV1BetaWorkloadsByNameData,
  PostApiV1BetaWorkloadsByNameRestartData,
  PostApiV1BetaWorkloadsByNameRestartError,
  PostApiV1BetaWorkloadsByNameRestartResponse,
  PostApiV1BetaWorkloadsByNameStopData,
  PostApiV1BetaWorkloadsByNameStopError,
  PostApiV1BetaWorkloadsByNameStopResponse,
  GetHealthData,
} from '../types.gen'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getApiOpenapiJsonQueryKey = (
  options?: Options<GetApiOpenapiJsonData>
) => createQueryKey('getApiOpenapiJson', options)

/**
 * Get OpenAPI specification
 * Returns the OpenAPI specification for the API
 */
export const getApiOpenapiJsonOptions = (
  options?: Options<GetApiOpenapiJsonData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOpenapiJson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiOpenapiJsonQueryKey(options),
  })
}

export const getApiV1BetaClientsQueryKey = (
  options?: Options<GetApiV1BetaClientsData>
) => createQueryKey('getApiV1BetaClients', options)

/**
 * List all clients
 * List all registered clients in ToolHive
 */
export const getApiV1BetaClientsOptions = (
  options?: Options<GetApiV1BetaClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaClientsQueryKey(options),
  })
}

export const postApiV1BetaClientsQueryKey = (
  options: Options<PostApiV1BetaClientsData>
) => createQueryKey('postApiV1BetaClients', options)

/**
 * Register a new client
 * Register a new client with ToolHive
 */
export const postApiV1BetaClientsOptions = (
  options: Options<PostApiV1BetaClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaClientsQueryKey(options),
  })
}

/**
 * Register a new client
 * Register a new client with ToolHive
 */
export const postApiV1BetaClientsMutation = (
  options?: Partial<Options<PostApiV1BetaClientsData>>
): UseMutationOptions<
  PostApiV1BetaClientsResponse,
  PostApiV1BetaClientsError,
  Options<PostApiV1BetaClientsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaClientsResponse,
    PostApiV1BetaClientsError,
    Options<PostApiV1BetaClientsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaClients({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaDiscoveryClientsQueryKey = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => createQueryKey('getApiV1BetaDiscoveryClients', options)

/**
 * List all clients status
 * List all clients compatible with ToolHive and their status
 */
export const getApiV1BetaDiscoveryClientsOptions = (
  options?: Options<GetApiV1BetaDiscoveryClientsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaDiscoveryClients({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaDiscoveryClientsQueryKey(options),
  })
}

export const getApiV1BetaRegistryQueryKey = (
  options?: Options<GetApiV1BetaRegistryData>
) => createQueryKey('getApiV1BetaRegistry', options)

/**
 * List registries
 * Get a list of the current registries
 */
export const getApiV1BetaRegistryOptions = (
  options?: Options<GetApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryQueryKey(options),
  })
}

export const postApiV1BetaRegistryQueryKey = (
  options?: Options<PostApiV1BetaRegistryData>
) => createQueryKey('postApiV1BetaRegistry', options)

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryOptions = (
  options?: Options<PostApiV1BetaRegistryData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaRegistryQueryKey(options),
  })
}

/**
 * Add a registry
 * Add a new registry
 */
export const postApiV1BetaRegistryMutation = (
  options?: Partial<Options<PostApiV1BetaRegistryData>>
): UseMutationOptions<
  unknown,
  PostApiV1BetaRegistryError,
  Options<PostApiV1BetaRegistryData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiV1BetaRegistryError,
    Options<PostApiV1BetaRegistryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaRegistry({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Remove a registry
 * Remove a specific registry
 */
export const deleteApiV1BetaRegistryByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaRegistryByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaRegistryByNameResponse,
  DeleteApiV1BetaRegistryByNameError,
  Options<DeleteApiV1BetaRegistryByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaRegistryByNameResponse,
    DeleteApiV1BetaRegistryByNameError,
    Options<DeleteApiV1BetaRegistryByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaRegistryByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaRegistryByNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => createQueryKey('getApiV1BetaRegistryByName', options)

/**
 * Get a registry
 * Get details of a specific registry
 */
export const getApiV1BetaRegistryByNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => createQueryKey('getApiV1BetaRegistryByNameServers', options)

/**
 * List servers in a registry
 * Get a list of servers in a specific registry
 */
export const getApiV1BetaRegistryByNameServersOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersQueryKey(options),
  })
}

export const getApiV1BetaRegistryByNameServersByServerNameQueryKey = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => createQueryKey('getApiV1BetaRegistryByNameServersByServerName', options)

/**
 * Get a server from a registry
 * Get details of a specific server in a registry
 */
export const getApiV1BetaRegistryByNameServersByServerNameOptions = (
  options: Options<GetApiV1BetaRegistryByNameServersByServerNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaRegistryByNameServersByServerName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaRegistryByNameServersByServerNameQueryKey(options),
  })
}

export const getApiV1BetaVersionQueryKey = (
  options?: Options<GetApiV1BetaVersionData>
) => createQueryKey('getApiV1BetaVersion', options)

/**
 * Get server version
 * Returns the current version of the server
 */
export const getApiV1BetaVersionOptions = (
  options?: Options<GetApiV1BetaVersionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaVersionQueryKey(options),
  })
}

export const getApiV1BetaWorkloadsQueryKey = (
  options?: Options<GetApiV1BetaWorkloadsData>
) => createQueryKey('getApiV1BetaWorkloads', options)

/**
 * List all workloads
 * Get a list of all running workloads
 */
export const getApiV1BetaWorkloadsOptions = (
  options?: Options<GetApiV1BetaWorkloadsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloads({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsQueryKey(options),
  })
}

export const postApiV1BetaWorkloadsQueryKey = (
  options: Options<PostApiV1BetaWorkloadsData>
) => createQueryKey('postApiV1BetaWorkloads', options)

/**
 * Create a new workload
 * Create and start a new workload
 */
export const postApiV1BetaWorkloadsOptions = (
  options: Options<PostApiV1BetaWorkloadsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloads({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsQueryKey(options),
  })
}

/**
 * Create a new workload
 * Create and start a new workload
 */
export const postApiV1BetaWorkloadsMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsResponse,
  PostApiV1BetaWorkloadsError,
  Options<PostApiV1BetaWorkloadsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsResponse,
    PostApiV1BetaWorkloadsError,
    Options<PostApiV1BetaWorkloadsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloads({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete a workload
 * Delete a workload
 */
export const deleteApiV1BetaWorkloadsByNameMutation = (
  options?: Partial<Options<DeleteApiV1BetaWorkloadsByNameData>>
): UseMutationOptions<
  DeleteApiV1BetaWorkloadsByNameResponse,
  DeleteApiV1BetaWorkloadsByNameError,
  Options<DeleteApiV1BetaWorkloadsByNameData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiV1BetaWorkloadsByNameResponse,
    DeleteApiV1BetaWorkloadsByNameError,
    Options<DeleteApiV1BetaWorkloadsByNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiV1BetaWorkloadsByName({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getApiV1BetaWorkloadsByNameQueryKey = (
  options: Options<GetApiV1BetaWorkloadsByNameData>
) => createQueryKey('getApiV1BetaWorkloadsByName', options)

/**
 * Get workload details
 * Get details of a specific workload
 */
export const getApiV1BetaWorkloadsByNameOptions = (
  options: Options<GetApiV1BetaWorkloadsByNameData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiV1BetaWorkloadsByName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApiV1BetaWorkloadsByNameQueryKey(options),
  })
}

export const postApiV1BetaWorkloadsByNameRestartQueryKey = (
  options: Options<PostApiV1BetaWorkloadsByNameRestartData>
) => createQueryKey('postApiV1BetaWorkloadsByNameRestart', options)

/**
 * Restart a workload
 * Restart a running workload
 */
export const postApiV1BetaWorkloadsByNameRestartOptions = (
  options: Options<PostApiV1BetaWorkloadsByNameRestartData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsByNameRestart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsByNameRestartQueryKey(options),
  })
}

/**
 * Restart a workload
 * Restart a running workload
 */
export const postApiV1BetaWorkloadsByNameRestartMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameRestartData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameRestartResponse,
  PostApiV1BetaWorkloadsByNameRestartError,
  Options<PostApiV1BetaWorkloadsByNameRestartData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameRestartResponse,
    PostApiV1BetaWorkloadsByNameRestartError,
    Options<PostApiV1BetaWorkloadsByNameRestartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameRestart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const postApiV1BetaWorkloadsByNameStopQueryKey = (
  options: Options<PostApiV1BetaWorkloadsByNameStopData>
) => createQueryKey('postApiV1BetaWorkloadsByNameStop', options)

/**
 * Stop a workload
 * Stop a running workload
 */
export const postApiV1BetaWorkloadsByNameStopOptions = (
  options: Options<PostApiV1BetaWorkloadsByNameStopData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiV1BetaWorkloadsByNameStop({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postApiV1BetaWorkloadsByNameStopQueryKey(options),
  })
}

/**
 * Stop a workload
 * Stop a running workload
 */
export const postApiV1BetaWorkloadsByNameStopMutation = (
  options?: Partial<Options<PostApiV1BetaWorkloadsByNameStopData>>
): UseMutationOptions<
  PostApiV1BetaWorkloadsByNameStopResponse,
  PostApiV1BetaWorkloadsByNameStopError,
  Options<PostApiV1BetaWorkloadsByNameStopData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiV1BetaWorkloadsByNameStopResponse,
    PostApiV1BetaWorkloadsByNameStopError,
    Options<PostApiV1BetaWorkloadsByNameStopData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiV1BetaWorkloadsByNameStop({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getHealthQueryKey = (options?: Options<GetHealthData>) =>
  createQueryKey('getHealth', options)

/**
 * Health check
 * Check if the API is healthy
 */
export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHealthQueryKey(options),
  })
}
