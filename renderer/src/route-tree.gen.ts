/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoreImport } from './routes/store'
import { Route as ShutdownImport } from './routes/shutdown'
import { Route as ClientsImport } from './routes/clients'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StoreRoute = StoreImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => rootRoute,
} as any)

const ShutdownRoute = ShutdownImport.update({
  id: '/shutdown',
  path: '/shutdown',
  getParentRoute: () => rootRoute,
} as any)

const ClientsRoute = ClientsImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsImport
      parentRoute: typeof rootRoute
    }
    '/shutdown': {
      id: '/shutdown'
      path: '/shutdown'
      fullPath: '/shutdown'
      preLoaderRoute: typeof ShutdownImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/shutdown': typeof ShutdownRoute
  '/store': typeof StoreRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/shutdown': typeof ShutdownRoute
  '/store': typeof StoreRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/clients': typeof ClientsRoute
  '/shutdown': typeof ShutdownRoute
  '/store': typeof StoreRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/clients' | '/shutdown' | '/store'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/clients' | '/shutdown' | '/store'
  id: '__root__' | '/' | '/clients' | '/shutdown' | '/store'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRoute: typeof ClientsRoute
  ShutdownRoute: typeof ShutdownRoute
  StoreRoute: typeof StoreRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRoute: ClientsRoute,
  ShutdownRoute: ShutdownRoute,
  StoreRoute: StoreRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/clients",
        "/shutdown",
        "/store"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/clients": {
      "filePath": "clients.tsx"
    },
    "/shutdown": {
      "filePath": "shutdown.tsx"
    },
    "/store": {
      "filePath": "store.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
