/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as ShutdownRouteImport } from "./routes/shutdown"
import { Route as SecretsRouteImport } from "./routes/secrets"
import { Route as RegistryRouteImport } from "./routes/registry"
import { Route as ClientsRouteImport } from "./routes/clients"
import { Route as IndexRouteImport } from "./routes/index"

const ShutdownRoute = ShutdownRouteImport.update({
  id: "/shutdown",
  path: "/shutdown",
  getParentRoute: () => rootRouteImport,
} as any)
const SecretsRoute = SecretsRouteImport.update({
  id: "/secrets",
  path: "/secrets",
  getParentRoute: () => rootRouteImport,
} as any)
const RegistryRoute = RegistryRouteImport.update({
  id: "/registry",
  path: "/registry",
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: "/clients",
  path: "/clients",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/clients": typeof ClientsRoute
  "/registry": typeof RegistryRoute
  "/secrets": typeof SecretsRoute
  "/shutdown": typeof ShutdownRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/clients": typeof ClientsRoute
  "/registry": typeof RegistryRoute
  "/secrets": typeof SecretsRoute
  "/shutdown": typeof ShutdownRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/clients": typeof ClientsRoute
  "/registry": typeof RegistryRoute
  "/secrets": typeof SecretsRoute
  "/shutdown": typeof ShutdownRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/clients" | "/registry" | "/secrets" | "/shutdown"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/clients" | "/registry" | "/secrets" | "/shutdown"
  id: "__root__" | "/" | "/clients" | "/registry" | "/secrets" | "/shutdown"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRoute: typeof ClientsRoute
  RegistryRoute: typeof RegistryRoute
  SecretsRoute: typeof SecretsRoute
  ShutdownRoute: typeof ShutdownRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/shutdown": {
      id: "/shutdown"
      path: "/shutdown"
      fullPath: "/shutdown"
      preLoaderRoute: typeof ShutdownRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/secrets": {
      id: "/secrets"
      path: "/secrets"
      fullPath: "/secrets"
      preLoaderRoute: typeof SecretsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/registry": {
      id: "/registry"
      path: "/registry"
      fullPath: "/registry"
      preLoaderRoute: typeof RegistryRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/clients": {
      id: "/clients"
      path: "/clients"
      fullPath: "/clients"
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRoute: ClientsRoute,
  RegistryRoute: RegistryRoute,
  SecretsRoute: SecretsRoute,
  ShutdownRoute: ShutdownRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
