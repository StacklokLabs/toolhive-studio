// This file is auto-generated by @hey-api/openapi-ts

export type RuntimeContainerInfo = {
  /**
   * Created is the container creation timestamp
   */
  Created?: string;
  /**
   * ID is the container ID
   */
  ID?: string;
  /**
   * Image is the container image
   */
  Image?: string;
  /**
   * Labels is the container labels
   */
  Labels?: {
    [key: string]: string;
  };
  /**
   * Name is the container name
   */
  Name?: string;
  /**
   * Ports is the container port mappings
   */
  Ports?: Array<RuntimePortMapping>;
  /**
   * State is the container state
   */
  State?: string;
  /**
   * Status is the container status
   */
  Status?: string;
};

export type RuntimePortMapping = {
  /**
   * ContainerPort is the port inside the container
   */
  containerPort?: number;
  /**
   * HostPort is the port on the host
   */
  hostPort?: number;
  /**
   * Protocol is the protocol (tcp, udp)
   */
  protocol?: string;
};

export type SecretsSecretParameter = {
  name?: string;
  target?: string;
};

/**
 * Request to create a new server
 */
export type V1CreateRequest = {
  /**
   * Authorization configuration
   */
  authz_config?: string;
  /**
   * Command arguments to pass to the container
   */
  cmd_arguments?: Array<string>;
  /**
   * Environment variables to set in the container
   */
  env_vars?: Array<string>;
  /**
   * Host to bind to
   */
  host?: string;
  /**
   * Docker image to use
   */
  image?: string;
  /**
   * Name of the server
   */
  name?: string;
  oidc?: V1OidcOptions;
  /**
   * Permission profile to apply
   */
  permission_profile?: string;
  /**
   * Secret parameters to inject
   */
  secrets?: Array<SecretsSecretParameter>;
  /**
   * Port to expose from the container
   */
  target_port?: number;
  /**
   * Transport configuration
   */
  transport?: string;
  /**
   * Volume mounts
   */
  volumes?: Array<string>;
};

/**
 * Response after successfully creating a server
 */
export type V1CreateServerResponse = {
  /**
   * Name of the created server
   */
  name?: string;
  /**
   * Port the server is listening on
   */
  port?: number;
};

/**
 * OIDC configuration options
 */
export type V1OidcOptions = {
  /**
   * Expected audience
   */
  audience?: string;
  /**
   * OAuth2 client ID
   */
  client_id?: string;
  /**
   * OIDC issuer URL
   */
  issuer?: string;
  /**
   * JWKS URL for key verification
   */
  jwks_url?: string;
};

/**
 * Response containing a list of servers
 */
export type V1ServerListResponse = {
  /**
   * List of container information for each server
   */
  servers?: Array<RuntimeContainerInfo>;
};

export type V1VersionResponse = {
  version?: string;
};

export type GetApiOpenapiJsonData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/openapi.json";
};

export type GetApiOpenapiJsonResponses = {
  /**
   * OpenAPI specification
   */
  200: {
    [key: string]: unknown;
  };
};

export type GetApiOpenapiJsonResponse =
  GetApiOpenapiJsonResponses[keyof GetApiOpenapiJsonResponses];

export type GetApiV1BetaServersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1beta/servers";
};

export type GetApiV1BetaServersResponses = {
  /**
   * OK
   */
  200: V1ServerListResponse;
};

export type GetApiV1BetaServersResponse =
  GetApiV1BetaServersResponses[keyof GetApiV1BetaServersResponses];

export type PostApiV1BetaServersData = {
  /**
   * Create server request
   */
  body: V1CreateRequest;
  path?: never;
  query?: never;
  url: "/api/v1beta/servers";
};

export type PostApiV1BetaServersErrors = {
  /**
   * Bad Request
   */
  400: string;
  /**
   * Conflict
   */
  409: string;
};

export type PostApiV1BetaServersError =
  PostApiV1BetaServersErrors[keyof PostApiV1BetaServersErrors];

export type PostApiV1BetaServersResponses = {
  /**
   * Created
   */
  201: V1CreateServerResponse;
};

export type PostApiV1BetaServersResponse =
  PostApiV1BetaServersResponses[keyof PostApiV1BetaServersResponses];

export type DeleteApiV1BetaServersByNameData = {
  body?: never;
  path: {
    /**
     * Server name
     */
    name: string;
  };
  query?: {
    /**
     * Force deletion
     */
    force?: boolean;
  };
  url: "/api/v1beta/servers/{name}";
};

export type DeleteApiV1BetaServersByNameErrors = {
  /**
   * Not Found
   */
  404: string;
};

export type DeleteApiV1BetaServersByNameError =
  DeleteApiV1BetaServersByNameErrors[keyof DeleteApiV1BetaServersByNameErrors];

export type DeleteApiV1BetaServersByNameResponses = {
  /**
   * No Content
   */
  204: string;
};

export type DeleteApiV1BetaServersByNameResponse =
  DeleteApiV1BetaServersByNameResponses[keyof DeleteApiV1BetaServersByNameResponses];

export type GetApiV1BetaServersByNameData = {
  body?: never;
  path: {
    /**
     * Server name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1beta/servers/{name}";
};

export type GetApiV1BetaServersByNameErrors = {
  /**
   * Not Found
   */
  404: string;
};

export type GetApiV1BetaServersByNameError =
  GetApiV1BetaServersByNameErrors[keyof GetApiV1BetaServersByNameErrors];

export type GetApiV1BetaServersByNameResponses = {
  /**
   * OK
   */
  200: RuntimeContainerInfo;
};

export type GetApiV1BetaServersByNameResponse =
  GetApiV1BetaServersByNameResponses[keyof GetApiV1BetaServersByNameResponses];

export type PostApiV1BetaServersByNameRestartData = {
  body?: never;
  path: {
    /**
     * Server name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1beta/servers/{name}/restart";
};

export type PostApiV1BetaServersByNameRestartErrors = {
  /**
   * Not Found
   */
  404: string;
};

export type PostApiV1BetaServersByNameRestartError =
  PostApiV1BetaServersByNameRestartErrors[keyof PostApiV1BetaServersByNameRestartErrors];

export type PostApiV1BetaServersByNameRestartResponses = {
  /**
   * No Content
   */
  204: string;
};

export type PostApiV1BetaServersByNameRestartResponse =
  PostApiV1BetaServersByNameRestartResponses[keyof PostApiV1BetaServersByNameRestartResponses];

export type PostApiV1BetaServersByNameStopData = {
  body?: never;
  path: {
    /**
     * Server name
     */
    name: string;
  };
  query?: never;
  url: "/api/v1beta/servers/{name}/stop";
};

export type PostApiV1BetaServersByNameStopErrors = {
  /**
   * Not Found
   */
  404: string;
};

export type PostApiV1BetaServersByNameStopError =
  PostApiV1BetaServersByNameStopErrors[keyof PostApiV1BetaServersByNameStopErrors];

export type PostApiV1BetaServersByNameStopResponses = {
  /**
   * No Content
   */
  204: string;
};

export type PostApiV1BetaServersByNameStopResponse =
  PostApiV1BetaServersByNameStopResponses[keyof PostApiV1BetaServersByNameStopResponses];

export type GetApiV1BetaVersionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1beta/version";
};

export type GetApiV1BetaVersionResponses = {
  /**
   * OK
   */
  200: V1VersionResponse;
};

export type GetApiV1BetaVersionResponse =
  GetApiV1BetaVersionResponses[keyof GetApiV1BetaVersionResponses];

export type GetHealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health";
};

export type GetHealthResponses = {
  /**
   * No Content
   */
  204: string;
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type ClientOptions = {
  baseUrl: `${string}://src` | (string & {});
};
